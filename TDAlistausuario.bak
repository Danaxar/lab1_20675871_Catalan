#lang racket
(require "TDAusuario.rkt")


; TDA lista de usuarios

; Otras funciones
; Comprueba si el usuario ya existe
(define (cmpcons c1 c2)
  (if (and (eqv? (car c1) (car c2)) (eqv? (cdr c1) (cdr c2)))
      #t
      #f
      )
  )

(define (existeUser? listaUsuarios user)
  (if (null? listaUsuarios)
      #f
      (if (cmpcons (car listaUsuarios) user)  ; Aqui est치 el error, no compara los cons
          #t
          (existeUser? (cdr listaUsuarios) user)
          )
      )
  )

; Representaci칩n
; (list usuario1 usuario2 ... usuarioN)

; Constructor
(define (crearListaUsuario usuario)
  (if (user? usuario)
      (list usuario)
      null
      )
  )

; Pertenencia
; Hacer una funci칩n que verifique que todos son usuarios
(define (listaUsuarios? listaUsers)
  (if (null? listaUsers)
      #t
      (if (user? (car listaUsers))
          (listaUsuarios? (cdr listaUsers))
          #f
          )
      )
  )


; Selectores
(define (obtenerUser listaUsuarios indice)
  (list-ref listaUsuarios indice)
  )

(define (obtenerPrimerUser lista_usuarios)
  (car lista_usuarios)
  )

; Modificadores
(define (agregarUser listaUsuarios usuario)
  (if (and (user? usuario) (listaUsuarios? listaUsuarios))
      (append listaUsuarios (list usuario)) ; Caso verdadero, el usuario es agregado a la lista
      listaUsuarios ; Caso falso -> el parametro usuario no corresponde al tda usuario
      )
  )



; Exportar la lista de usuarios como string
(define (listaUsuarios->string lista_usuarios)
  
  (define (listaUsuarios->stringEncapsulado lista_usuarios resultado)
    (if (null? lista_usuarios)      
        resultado
        (listaUsuarios->stringEncapsulado
         (obtenerPrimerUser lista_usuarios)
         (string-append
          (user->string (obtenerPrimerUser lista_usuarios)) "\n\t"
          ))
        )
    )

  ; Llamar a la funci칩n
  (listaUsuarios->stringEncapsulado lista_usuarios "\t")
   
  )

(define usuario (user "daniel" "rucio025"))
(define lista (crearListaUsuario usuario))
(define lista2 (agregarUser lista (user "paula" "2501")))
(define lista3 (agregarUser lista2 (user "monse" "123")))



(provide obtenerUser agregarUser crearListaUsuario existeUser?)

